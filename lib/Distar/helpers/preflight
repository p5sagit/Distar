#!/usr/bin/env perl
use strict;
use warnings FATAL => 'all';
use Config;
use File::Spec;
use File::Find;
use Getopt::Long qw(:config gnu_getopt);

GetOptions(
  "branch=s"     => \(my $branch = 'master'),
  "changelog=s"  => \(my $changelog = 'Changes'),
) or die("Error in command line arguments\n");

my $version = shift or die "version required!";

my $make = $Config{make};
my $null = File::Spec->devnull;

system("git fetch");
if (system("git rev-parse --quiet --verify v$version >$null") == 0) {
  die "Tag v$version already exists!";
}

chomp(my $head = `git symbolic-ref -q HEAD`);
(my $current_branch = $head) =~ s{^refs/heads/}{};
$head eq "refs/heads/$branch"
  or die "Current branch is $current_branch, not $branch. EEEK!\n";
chomp(my $upstream = `git for-each-ref --format="%(upstream)" $head`);
length $upstream
  or die "No upstream branch configured for $branch!\n";
my $base_rev = `git merge-base $upstream $head`;
my $upstream_rev = `git rev-parse --verify $upstream`;
$upstream_rev eq $base_rev
  or die "Not synced with upstream!\n";

for (scalar `git diff`) {
  length && die "Outstanding changes!\n";
}
my $ymd = sprintf(
  "%i-%02i-%02i", (gmtime)[5]+1900, (gmtime)[4]+1, (gmtime)[3]
);
my $changes_line = "$version - $ymd\n";
my @cached = grep /^\+/, `git diff --cached -U0 --no-prefix`;
@cached > 0 or die "Please add:\n\n$changes_line\nto $changelog and stage $changelog (git add $changelog)\n";
@cached == 2 or die "All '$changelog' changes must be committed aside from version heading\n";
$cached[0] =~ /^\+\+\+ \Q$changelog\E\n/ or die "$changelog not changed\n";
$cached[1] eq "+$changes_line" or die "$changelog new line should be: \n\n$changes_line\n";
